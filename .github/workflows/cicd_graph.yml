name: CI/CD job graph

on: [push]

jobs:
  test_functional:
    name: Execute tests and code coverage report
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip pipenv
        python -m pipenv --three --bare install --dev
    - name: Test with pytest
      run: pipenv run coverage run -m pytest
    - name: Report code test coverage
      run: pipenv run coverage report
  build_container_images:
    name: Build container images and push them to GHP, GCR
    needs: test_functional
    runs-on: ubuntu-latest
    env:
      image_name: homework
    steps:
    - uses: actions/checkout@v1
    - name: Build the Docker image
      run: |
        export branch_slug=$(cut --delimiter / --fields 3- <<< $GITHUB_REF | tr --complement [:alnum:] -)
        export timestamp=$(date +%s)
        docker build . --file Dockerfile --tag $image_name:latest
        for extra_tag in $branch_slug-latest $timestamp
        do
            docker image tag $image_name:latest $image_name:$extra_tag
        done
    - name: Publish the Docker image to GitHub Packages
      env:
        registry_domain: docker.pkg.github.com
        registry_credentials: ${{ secrets.GITHUB_TOKEN }}
      run: |
        export registry_user=$GITHUB_ACTOR image_path=$registry_domain/$GITHUB_REPOSITORY
        docker login -u $registry_user --password-stdin $registry_domain <<< $registry_credentials
        for tag in $(docker image ls --format '{{.Tag}}' $image_name)
        do
            docker tag $image_name:$tag $image_path/$image_name:$tag
            docker push $image_path/$image_name:$tag
        done
        docker logout $registry_domain
    - name: Publish the Docker image to Google Container Registry
      env:
        registry_domain: eu.gcr.io
        registry_user: _json_key
        registry_credentials: ${{ secrets.GCP_SA_KEY }}
      run: |
        export image_path=$registry_domain/${{ secrets.GCP_PROJECT }}
        docker login -u $registry_user --password-stdin $registry_domain <<< $registry_credentials
        for tag in $(docker image ls --format '{{.Tag}}' $image_name)
        do
            docker tag $image_name:$tag $image_path/$image_name:$tag
            docker push $image_path/$image_name:$tag
        done
        docker logout $registry_domain
  deploy_to_gke:
    name: Deploy to GKE idempotently
    needs: build_container_images
    runs-on: ubuntu-latest
    env:
      gcp_credentials: ${{ secrets.GCP_SA_KEY }}
      gcp_project: ${{ secrets.GCP_PROJECT }}
      gcp_zone: europe-west3-c
      gke_cluster: homework-1-gke-cluster
      sdk_url: https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-277.0.0-linux-x86_64.tar.gz
      sdk_sha256sum: b158894c427712d006fac235daf8d288db110ecfbcf649ed11cdf36ac2b2ff2a
    steps:
    - uses: actions/checkout@v1
    - name: Install gcloud and kubectl tools
      run: |
        curl ${sdk_url} -o sdk.tar.gz
        test $(sha256sum sdk.tar.gz | cut -d\  -f1) == ${sdk_sha256sum}
        tar xzf sdk.tar.gz
        yes | bash google-cloud-sdk/install.sh
        source google-cloud-sdk/path.bash.inc
        yes | gcloud components update
        yes | gcloud components install kubectl
    - name: Setup credentials
      run: |
        echo $gcp_credentials > gcp_sa_key.json
        gcloud auth activate-service-account --key-file=gcp_sa_key.json 
        gcloud container clusters get-credentials ${gke_cluster} --project=${gcp_project} --zone=${gcp_zone}
    - name: Apply k8s declarative configuration
      run: |
        cat deploy/deployment.yaml deploy/service.yaml | kubectl apply -f-

